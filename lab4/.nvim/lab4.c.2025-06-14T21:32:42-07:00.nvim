#include <errno.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define _GNU_SOURCE
#define EXTRA_HEAP 256
#define BLOCK_SIZE 128
#define HEADER_SIZE sizeof(struct header)
#define DATA_SIZE (BLOCK_SIZE - HEADER_SIZE)
#define BUF_SIZE 100

struct header {
  uint64_t size;
  struct header *next;
};

void print_out(char *format, void *data, size_t data_size) {
    char buf[BUF_SIZE];
    ssize_t len;

    if (data_size == sizeof(uint64_t)) {
        uint64_t val = *(uint64_t *)data;
        len = snprintf(buf, BUF_SIZE, format, val);
    } else {
        void *ptr = *(void **)data;
        len = snprintf(buf, BUF_SIZE, format, ptr);
    }

    if (len < 0) {
        perror("snprintf");
        exit(EXIT_FAILURE);
    }
    write(STDOUT_FILENO, buf, len);
}


void handle_error(const char *msg) {
  perror(msg);
  exit(EXIT_FAILURE);
}

int main() {
  void *heap_start = (void *)sbrk(EXTRA_HEAP);
  if (heap_start == (void *)-1) {
    handle_error("sbrk failed");
  }

  struct header *block1 = (struct header *)heap_start;
  struct header *block2 = (struct header *)((char *)heap_start + BLOCK_SIZE);

  block1->size = BLOCK_SIZE;
  block1->next = NULL;

  block2->size = BLOCK_SIZE;
  block2->next = block1;

  void *block1_data = (void *)((char *)block1 + HEADER_SIZE);
  void *block2_data = (void *)((char *)block2 + HEADER_SIZE);

  memset(block1_data, 0, DATA_SIZE);
  memset(block2_data, 1, DATA_SIZE);

  print_out("first block:       %p\n", block1, sizeof(block1));
  print_out("second block:      %p\n", block2, sizeof(block2));
  print_out("first block size:  %lu\n", &block1->size, sizeof(block1->size));
  print_out("first block next:  %p\n", &block1->next, sizeof(block1->next));
  print_out("second block size: %lu\n", &block2->size, sizeof(block2->size));
  print_out("second block next: %p\n", &block2->next, sizeof(block2->next));

  uint8_t *b1 = (uint8_t *)block1_data;
  for (size_t i = 0; i < DATA_SIZE; i++) {
    print_out("%d\n", &b1[i], sizeof(b1[i]));
  }

  uint8_t *b2 = (uint8_t *)block2_data;
  for (size_t i = 0; i < DATA_SIZE; i++) {
    print_out("%d\n", &b2[i], sizeof(b2[i]));
  }

  return 0;
}
